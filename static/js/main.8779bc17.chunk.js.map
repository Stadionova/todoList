{"version":3,"sources":["components/Tasks/Tasks.module.css","components/ToDoListWrapper/ToDoListWrapper.module.css","components/NewTask/NewTask.module.css","components/EachTaskInList/EachTaskInList.module.css","components/ToDoListWrapper/back.png","components/NewTask/NewTask.jsx","actions.js","store.js","components/NewTask/NewTaskContainer.jsx","components/EachTaskInList/EachTaskInList.jsx","components/EachTaskInList/EachTaskInListContainer.jsx","components/Tasks/Tasks.jsx","components/Tasks/TasksContainer.jsx","components/ToDoListWrapper/ToDoListWrapper.jsx","components/ToDoListWrapper/ToDoListWrapperContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","NewTask","enterHandler","catchInputChanges","newTaskInputValue","className","classes","newTaskInput","onKeyDown","onChange","value","INPUT_TASK_VALUE_CHANGED","REMOVE_TASK","ADD_TASK","initialState","newTaskCreated","maxId","tasks","store","createStore","state","action","type","console","log","Object","assign","allTasks","forEach","taskObj","index","id","splice","catchInputChangesActionCreator","NewTaskContainer","checkIsInputValueContainOnlySpaces","inputValue","length","test","event","newState","target","setState","currentValue","props","dispatch","code","keyCode","this","newLocalState","updateData","bind","React","Component","EachTaskInList","removeTask","task","onClick","EachTaskInListContainer","deletedTaskId","parentNode","getAttribute","tasksList","map","taskValue","removeTaskHandler","Tasks","TasksContainer","tasksWrapper","localStorage","setItem","ToDoListWrapper","src","logo","alt","wrapper","ToDoListWrapperContainer","currentMaxId","getItem","data","JSON","parse","itemsArray","stringify","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8779bc17.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksList\":\"Tasks_tasksList__2gITH\",\"tasksWrapper\":\"Tasks_tasksWrapper__3F3lm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ToDoListWrapper_wrapper__2aI7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newTaskInput\":\"NewTask_newTaskInput__2kz-n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"EachTaskInList_task__3aaqC\"};","export default __webpack_public_path__ + \"static/media/back.1fa88825.png\";","import classes from \"./NewTask.module.css\";\r\nimport React from \"react\";\r\n\r\nconst NewTask = ({ enterHandler, catchInputChanges, newTaskInputValue }) => {\r\n    return (\r\n        <div className={classes.newTaskInput}>\r\n            <input\r\n                onKeyDown={enterHandler}\r\n                onChange={catchInputChanges}\r\n                value={newTaskInputValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewTask;\r\n","export const INPUT_TASK_VALUE_CHANGED = 'INPUT_TASK_VALUE_CHANGED';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const ADD_TASK = 'ADD_TASK';\r\n","import { createStore } from 'redux';\r\nimport { INPUT_TASK_VALUE_CHANGED, REMOVE_TASK, ADD_TASK } from './actions'; // these are actions\r\n\r\nconst initialState = {\r\n    newTaskInputValue: '',\r\n    newTaskCreated: 'false',\r\n    maxId: 3,\r\n    tasks: [{}]\r\n};\r\n\r\n// reducer function, which get action & return changed state\r\n// (currentState, action) => newState\r\n// Редуктор принимает два аргумента - состояние и действие - и возвращает новое состояние.\r\nfunction toDoListReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case INPUT_TASK_VALUE_CHANGED:\r\n            console.log(1);\r\n            return Object.assign({}, state, {// возвращаю копию стэйта\r\n                ...state,\r\n                newTaskInputValue: action.newTaskInputValue\r\n            });\r\n        // state.newTaskInputValue = action.newTaskInputValue;\r\n        // return state + action.payload\r\n        // return state;\r\n        case REMOVE_TASK:\r\n            console.log(2);\r\n            const allTasks = state.tasks;\r\n            allTasks.forEach((taskObj, index) => {\r\n                if (taskObj.id == action.id) {\r\n                    allTasks.splice(index, 1);\r\n                    return Object.assign({}, state, {// возвращаю копию стэйта\r\n                        ...state,\r\n                        tasks: allTasks\r\n                    });\r\n                }\r\n            });\r\n            return state;\r\n        case ADD_TASK:\r\n            console.log(3);\r\n            // const allTasks = state.tasks;\r\n            // allTasks.forEach((taskObj, index) => {\r\n            //     if (taskObj.id == action.id) {\r\n            //         allTasks.splice(index, 1);\r\n            //         state.tasks = allTasks;\r\n            //     }\r\n            // });\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(toDoListReducer, initialState);\r\n\r\n// store.subscribe(() => {\r\n//     console.log(\"State has changed\" + store.getState());\r\n// });\r\n\r\nexport const catchInputChangesActionCreator = (newTaskInputValue) => { // action creator\r\n    return {\r\n        type: INPUT_TASK_VALUE_CHANGED,\r\n        newTaskInputValue: newTaskInputValue\r\n    }\r\n};\r\n\r\n// store.dispatch(catchInputChangesActionCreator(1));\r\n\r\nexport const removeTaskActionCreator = (id) => { // action creator\r\n    return {\r\n        type: REMOVE_TASK,\r\n        id: id\r\n    }\r\n};\r\n\r\nexport const addTaskByEnterActionCreator = (id) => { // action creator\r\n    return {\r\n        type: ADD_TASK,\r\n        id: id\r\n    }\r\n};\r\n\r\nexport default store;\r\n","import NewTask from \"./NewTask\";\r\nimport React from \"react\";\r\nimport { catchInputChangesActionCreator, addTaskByEnterActionCreator } from \"./../../store\";\r\n\r\nclass NewTaskContainer extends React.Component {\r\n    state = {\r\n        newTaskInputValue: '',\r\n        newTaskCreated: null\r\n    }\r\n    checkIsInputValueContainOnlySpaces = (inputValue) => {\r\n        // let message = inputValue;\r\n        if (inputValue.length > 0) {\r\n            let pattern = /^[\\s]+$/;\r\n            if (!pattern.test(inputValue)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    catchInputChanges = (event) => {\r\n        let newState = this.state;\r\n        newState.newTaskInputValue = event.target.value;\r\n        this.setState(newState);\r\n        const currentValue = event.target.value;\r\n        return this.props.dispatch(catchInputChangesActionCreator(currentValue));\r\n        // return this.props.dispatch(action);\r\n    }\r\n    enterHandler(event) {\r\n        if (event.code === 'Enter' || event.keyCode === 13) {\r\n            const isSpacesInInput = this.checkIsInputValueContainOnlySpaces(this.state.newTaskInputValue);\r\n            if (isSpacesInInput) {\r\n                let newState = this.state;\r\n                newState.newTaskCreated = 'true';\r\n                newState.newTaskInputValue = this.state.newTaskInputValue;\r\n                this.setState(newState);\r\n                let newLocalState = this.props.updateData(this.state);\r\n                newState.newTaskInputValue = '';\r\n                this.setState(newState);\r\n                // return newLocalState;\r\n                return this.props.dispatch(addTaskByEnterActionCreator(newLocalState));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <NewTask\r\n                newTaskInputValue={this.state.newTaskInputValue}\r\n                catchInputChanges={this.catchInputChanges}\r\n                enterHandler={this.enterHandler.bind(this)}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTaskContainer;\r\n","import classes from \"./EachTaskInList.module.css\";\r\nimport React from \"react\";\r\n\r\nconst EachTaskInList = ({ id, value, removeTask }) => {\r\n    return (\r\n        <div className={classes.task} id={id}>\r\n            <span>{value}</span>\r\n            <button onClick={event => removeTask(event)}>x</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EachTaskInList;\r\n","import EachTaskInList from \"./EachTaskInList\";\r\nimport { removeTaskActionCreator } from \"./../../store\";\r\nimport React from \"react\";\r\n\r\nclass EachTaskInListContainer extends React.Component {\r\n    removeTaskHandler(event) {\r\n        let deletedTaskId = event.target.parentNode.getAttribute('id');\r\n        this.props.tasksList.map((task, index) => {\r\n            if (deletedTaskId == task.id) {\r\n                let action = removeTaskActionCreator(index);\r\n                this.props.dispatch(action);\r\n                return this.props.removeTask(index);\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <EachTaskInList\r\n                    id={this.props.taskValue.id}\r\n                    value={this.props.taskValue.value}\r\n                    removeTask={this.removeTaskHandler.bind(this)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachTaskInListContainer;\r\n","import EachTaskInListContainer from '../EachTaskInList/EachTaskInListContainer';\r\nimport React from \"react\";\r\n\r\nconst Tasks = ({ store, state, dispatch, removeTask, taskValue, tasksList }) => {\r\n    return (\r\n        <div>\r\n            <EachTaskInListContainer\r\n                store={store}\r\n                state={state}\r\n                dispatch={dispatch}\r\n                removeTask={removeTask}\r\n                taskValue={taskValue}\r\n                tasksList={tasksList}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;\r\n","import classes from \"./Tasks.module.css\";\r\nimport Tasks from './Tasks';\r\nimport React from \"react\";\r\n\r\nconst TasksContainer = ({ store, dispatch, removeTask, tasksList }) => {\r\n    return (\r\n        <div className={classes.tasksWrapper}>\r\n            { tasksList.map(task => {\r\n                localStorage.setItem('itemsMaxId_1', task.id);\r\n                return (\r\n                    <div className={classes.tasksList} >\r\n                        <Tasks\r\n                            store={store}\r\n                            state={true}\r\n                            dispatch={dispatch}\r\n                            removeTask={removeTask}\r\n                            taskValue={task}\r\n                            tasksList={tasksList}\r\n                        />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TasksContainer;\r\n","import classes from \"./ToDoListWrapper.module.css\";\r\nimport logo from './back.png';\r\nimport NewTaskContainer from '../NewTask/NewTaskContainer';\r\nimport TasksContainer from '../Tasks/TasksContainer';\r\nimport React from \"react\";\r\n\r\nconst ToDoListWrapper = ({ store, updateData, state, removeTask, tasksList, id }) => {\r\n    return (\r\n        <div>\r\n            <div><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\r\n            <div className={classes.wrapper}>\r\n                <NewTaskContainer\r\n                    dispatch={store.dispatch}\r\n                    updateData={updateData}\r\n                />\r\n                <TasksContainer\r\n                    dispatch={store.dispatch}\r\n                    state={state}\r\n                    removeTask={removeTask}\r\n                    tasksList={tasksList}\r\n                    key={id}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoListWrapper;\r\n","import ToDoListWrapper from \"./ToDoListWrapper\";\r\nimport React from \"react\";\r\n\r\nclass ToDoListWrapperContainer extends React.Component {\r\n    state = {\r\n        newTaskInputValue: '',\r\n        newTaskCreated: 'false',\r\n        maxId: 1,\r\n        tasks: []\r\n    }\r\n    render() {\r\n        !localStorage.getItem('items') && localStorage.setItem('items', JSON.stringify([]));\r\n\r\n        const data = JSON.parse(localStorage.getItem('items'));\r\n\r\n        return (\r\n            <div>\r\n                <ToDoListWrapper\r\n                    store={this.props.store}\r\n                    updateData={this.updateData}\r\n                    state={this.state.newTaskCreated}\r\n                    removeTask={this.removeTask}\r\n                    tasksList={data}\r\n                    id={this.state.maxId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    updateData = (value) => {\r\n        const currentMaxId = +localStorage.getItem('itemsMaxId_1');\r\n\r\n        this.setState({ newTaskCreated: value.newTaskCreated });\r\n        this.setState({ newTaskInputValue: value.newTaskInputValue });\r\n        this.setState({ maxId: currentMaxId + 1 });\r\n\r\n        this.setState({\r\n            tasks: [...this.state.tasks, {\r\n                id: currentMaxId + 1,\r\n                value: value.newTaskInputValue\r\n            }]\r\n        });\r\n\r\n        const data = JSON.parse(localStorage.getItem('items'));\r\n\r\n        const newTaskToStorage = [...data, {\r\n            id: currentMaxId + 1,\r\n            value: value.newTaskInputValue\r\n        }];\r\n\r\n        let itemsArray = newTaskToStorage;\r\n        localStorage.setItem('items', JSON.stringify(itemsArray));\r\n    }\r\n    removeTask = (id) => {\r\n        const allTasks = JSON.parse(localStorage.getItem('items'));\r\n        allTasks.splice(id, 1);\r\n\r\n        if (allTasks.length === 0) {\r\n            localStorage.setItem('itemsMaxId_1', 0);\r\n        }\r\n\r\n        localStorage.setItem('items', JSON.stringify(allTasks));\r\n\r\n        this.setState({\r\n            tasks: allTasks\r\n        });\r\n    }\r\n}\r\n\r\nexport default ToDoListWrapperContainer;\r\n","import './App.css';\r\nimport ToDoListWrapperContainer from './components/ToDoListWrapper/ToDoListWrapperContainer';\r\nimport store from './store';\r\nimport React from \"react\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <ToDoListWrapperContainer store={store} />\r\n      </div>\r\n    </BrowserRouter >\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
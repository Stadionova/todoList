{"version":3,"sources":["components/Tasks/Tasks.module.css","components/EachTaskInList/EachTaskInList.module.css","components/ToDoListWrapper/ToDoListWrapper.module.css","components/NewTask/NewTask.module.css","components/ToDoListWrapper/back.png","components/NewTask/NewTask.jsx","store.js","components/NewTask/NewTaskContainer.jsx","components/EachTaskInList/EachTaskInList.jsx","components/EachTaskInList/EachTaskInListContainer.jsx","components/Tasks/Tasks.jsx","components/Tasks/TasksContainer.jsx","components/ToDoListWrapper/ToDoListWrapper.jsx","components/ToDoListWrapper/ToDoListWrapperContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","NewTask","props","className","classes","newTaskInput","onKeyDown","enterHandler","onChange","catchInputChages","value","newTaskInputValue","initialState","newTaskCreated","maxId","tasks","1","id","2","3","store","createStore","state","action","type","allTasks","forEach","taskObj","index","splice","catchInputChagesActionCreator","NewTaskContainer","event","newState","target","setState","dispatch","checkIsInputValueContainOnlySpaces","inputValue","message","length","test","code","keyCode","this","newLocalState","updateData","bind","React","Component","EachTaskInList","task","onClick","removeTask","EachTaskInListContainer","deletedTaskId","parentNode","getAttribute","tasksList","map","taskValue","removeTaskHandler","Tasks","TasksContainer","tasksWrapper","localStorage","setItem","ToDoListWrapper","src","logo","alt","wrapper","ToDoListWrapperContainer","currentMaxId","getItem","data","JSON","parse","itemsArray","stringify","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d49c4a87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksList\":\"Tasks_tasksList__2gITH\",\"tasksWrapper\":\"Tasks_tasksWrapper__3F3lm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"EachTaskInList_task__3aaqC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ToDoListWrapper_wrapper__2aI7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newTaskInput\":\"NewTask_newTaskInput__2kz-n\"};","export default __webpack_public_path__ + \"static/media/back.c0070ba5.png\";","import classes from \"./NewTask.module.css\";\r\nimport React from \"react\";\r\n\r\nconst NewTask = (props) => {\r\n    return (\r\n        <div className={classes.newTaskInput}>\r\n            <input\r\n                onKeyDown={props.enterHandler}\r\n                onChange={props.catchInputChages}\r\n                value={props.newTaskInputValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewTask;\r\n","import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n    newTaskInputValue: '',\r\n    newTaskCreated: 'false',\r\n    maxId: 3,\r\n    tasks: [\r\n        {\r\n            1: {\r\n                id: 1,\r\n                value: 'hello'\r\n            },\r\n            2: {\r\n                id: 2,\r\n                value: 'hi'\r\n            },\r\n            3: {\r\n                id: 3,\r\n                value: 'yulia'\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nfunction toDoListReducer(state = initialState, action) { // reducer function, which get action & return changed state\r\n    switch (action.type) {\r\n        case 'INPUT_TASK_VALUE_CHANGED':\r\n            state.newTaskInputValue = action.newTaskInputValue;\r\n            return state;\r\n        case 'ENTER_TYPED':\r\n            state.newTaskCreated = action.newTaskCreated;\r\n            return state;\r\n        case 'SET_NULL_INPUT_VALUE':\r\n            state.newTaskInputValue = action.newTaskInputValue;\r\n            return state;\r\n        case 'REMOVE_TASK':\r\n            const allTasks = state.tasks;\r\n            allTasks.forEach((taskObj, index) => {\r\n                if (taskObj.id == action.id) {\r\n                    allTasks.splice(index, 1);\r\n                    state.tasks = allTasks;\r\n                }\r\n            });\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(toDoListReducer);\r\n\r\nexport const catchInputChagesActionCreator = (newTaskInputValue) => {\r\n    return {\r\n        type: 'INPUT_TASK_VALUE_CHANGED',\r\n        newTaskInputValue: newTaskInputValue\r\n    }\r\n};\r\n\r\nexport const removeTaskActionCreator = (id) => {\r\n    return {\r\n        type: 'REMOVE_TASK',\r\n        id: id\r\n    }\r\n};\r\n\r\nexport default store;\r\n","import NewTask from \"./NewTask\";\r\nimport React from \"react\";\r\nimport { catchInputChagesActionCreator } from \"./../../store\";\r\n\r\nclass NewTaskContainer extends React.Component {\r\n    state = {\r\n        newTaskInputValue: '',\r\n        newTaskCreated: null\r\n    }\r\n    catchInputChages = (event) => {\r\n        let newState = this.state;\r\n        newState.newTaskInputValue = event.target.value;\r\n        this.setState(newState);\r\n        let action = catchInputChagesActionCreator(this.state.newTaskInputValue);\r\n        return this.props.dispatch(action);\r\n    }\r\n    checkIsInputValueContainOnlySpaces = (inputValue) => {\r\n        let message = inputValue;\r\n        if (message.length > 0) {\r\n            let pattern = /^[\\s]+$/;\r\n            if (!pattern.test(message)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    enterHandler(event) {\r\n        if (event.code === 'Enter' || event.keyCode === 13) {\r\n            const isSpacesInInput = this.checkIsInputValueContainOnlySpaces(this.state.newTaskInputValue);\r\n            if (isSpacesInInput) {\r\n                let newState = this.state;\r\n                newState.newTaskCreated = 'true';\r\n                newState.newTaskInputValue = this.state.newTaskInputValue;\r\n                this.setState(newState);\r\n                let newLocalState = this.props.updateData(this.state);\r\n                newState.newTaskInputValue = '';\r\n                this.setState(newState);\r\n                return newLocalState;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <NewTask\r\n                newTaskInputValue={this.state.newTaskInputValue}\r\n                catchInputChages={this.catchInputChages}\r\n                enterHandler={this.enterHandler.bind(this)}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTaskContainer;\r\n","import classes from \"./EachTaskInList.module.css\";\r\nimport React from \"react\";\r\n\r\nconst EachTaskInList = (props) => {\r\n    return (\r\n        <div className={classes.task} id={props.id}>\r\n            <span>{props.value}</span>\r\n            <button onClick={event => props.removeTask(event)}>x</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EachTaskInList;\r\n","import classes from \"./EachTaskInList.module.css\";\r\nimport EachTaskInList from \"./EachTaskInList\";\r\nimport { removeTaskActionCreator } from \"./../../store\";\r\nimport React from \"react\";\r\n\r\nclass EachTaskInListContainer extends React.Component {\r\n    removeTaskHandler(event) {\r\n        let deletedTaskId = event.target.parentNode.getAttribute('id');\r\n        this.props.tasksList.map((task, index) => {\r\n            if (deletedTaskId == task.id) {\r\n                let action = removeTaskActionCreator(index);\r\n                this.props.dispatch(action);\r\n                return this.props.removeTask(index);\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.task} id={this.props.taskValue.id}>\r\n                <EachTaskInList\r\n                    id={this.props.taskValue.id}\r\n                    value={this.props.taskValue.value}\r\n                    removeTask={this.removeTaskHandler.bind(this)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachTaskInListContainer;\r\n","import classes from \"./Tasks.module.css\";\r\nimport EachTaskInListContainer from '../EachTaskInList/EachTaskInListContainer';\r\nimport React from \"react\";\r\n\r\nconst Tasks = (props) => {\r\n    return (\r\n        <div className={classes.tasksList} >\r\n            <EachTaskInListContainer\r\n                store={props.store}\r\n                state={props.state}\r\n                dispatch={props.dispatch}\r\n                removeTask={props.removeTask}\r\n                taskValue={props.taskValue}\r\n                tasksList={props.tasksList}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;\r\n","import classes from \"./Tasks.module.css\";\r\nimport Tasks from './Tasks';\r\nimport React from \"react\";\r\n\r\nconst TasksContainer = (props) => {\r\n    return (\r\n        <div className={classes.tasksWrapper}>\r\n            {props.tasksList.map(task => {\r\n                localStorage.setItem('itemsMaxId_1', task.id);\r\n                return (\r\n                    <div className={classes.tasksList} >\r\n                        <Tasks\r\n                            store={props.store}\r\n                            state={true}\r\n                            dispatch={props.dispatch}\r\n                            removeTask={props.removeTask}\r\n                            taskValue={task}\r\n                            tasksList={props.tasksList}\r\n                        />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TasksContainer;\r\n","import classes from \"./ToDoListWrapper.module.css\";\r\nimport logo from './back.png';\r\nimport NewTaskContainer from '../NewTask/NewTaskContainer';\r\nimport TasksContainer from '../Tasks/TasksContainer';\r\nimport React from \"react\";\r\n\r\nconst ToDoListWrapper = (props) => {\r\n    return (\r\n        <div>\r\n            <div><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\r\n            <div className={classes.wrapper}>\r\n                <NewTaskContainer\r\n                    dispatch={props.store.dispatch}\r\n                    updateData={props.updateData}\r\n                />\r\n                <TasksContainer\r\n                    dispatch={props.store.dispatch}\r\n                    state={props.state}\r\n                    removeTask={props.removeTask}\r\n                    tasksList={props.tasksList}\r\n                    key={props.id}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoListWrapper;\r\n","import ToDoListWrapper from \"./ToDoListWrapper\";\r\nimport React from \"react\";\r\n\r\nclass ToDoListWrapperContainer extends React.Component {\r\n    state = {\r\n        newTaskInputValue: '',\r\n        newTaskCreated: 'false',\r\n        maxId: 1,\r\n        tasks: []\r\n    }\r\n    render() {\r\n        !localStorage.getItem('items') && localStorage.setItem('items', JSON.stringify([]));\r\n\r\n        const data = JSON.parse(localStorage.getItem('items'));\r\n\r\n        return (\r\n            <div>\r\n                <ToDoListWrapper\r\n                    store={this.props.store}\r\n                    updateData={this.updateData}\r\n                    state={this.state.newTaskCreated}\r\n                    removeTask={this.removeTask}\r\n                    tasksList={data}\r\n                    id={this.state.maxId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    updateData = (value) => {\r\n        const currentMaxId = +localStorage.getItem('itemsMaxId_1');\r\n\r\n        this.setState({ newTaskCreated: value.newTaskCreated });\r\n        this.setState({ newTaskInputValue: value.newTaskInputValue });\r\n        this.setState({ maxId: currentMaxId + 1 });\r\n\r\n        this.setState({\r\n            tasks: [...this.state.tasks, {\r\n                id: currentMaxId + 1,\r\n                value: value.newTaskInputValue\r\n            }]\r\n        });\r\n\r\n        const data = JSON.parse(localStorage.getItem('items'));\r\n\r\n        const newTaskToStorage = [...data, {\r\n            id: currentMaxId + 1,\r\n            value: value.newTaskInputValue\r\n        }];\r\n\r\n        let itemsArray = newTaskToStorage;\r\n        localStorage.setItem('items', JSON.stringify(itemsArray));\r\n    }\r\n    removeTask = (id) => {\r\n        const allTasks = JSON.parse(localStorage.getItem('items'));\r\n        allTasks.splice(id, 1);\r\n\r\n        if (allTasks.length === 0) {\r\n            localStorage.setItem('itemsMaxId_1', 0);\r\n        }\r\n\r\n        localStorage.setItem('items', JSON.stringify(allTasks));\r\n\r\n        this.setState({\r\n            tasks: allTasks\r\n        });\r\n    }\r\n}\r\n\r\nexport default ToDoListWrapperContainer;\r\n","import './App.css';\r\nimport ToDoListWrapperContainer from './components/ToDoListWrapper/ToDoListWrapperContainer';\r\nimport store from './store';\r\nimport React from \"react\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <ToDoListWrapperContainer store={store} />\r\n      </div>\r\n    </BrowserRouter >\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Tasks/Tasks.module.css","components/EachTaskInList/EachTaskInList.module.css","components/ToDoListWrapper/ToDoListWrapper.module.css","components/NewTask/NewTask.module.css","components/ToDoListWrapper/back.png","components/NewTask/NewTask.jsx","store.js","components/NewTask/NewTaskContainer.jsx","components/EachTaskInList/EachTaskInList.jsx","components/EachTaskInList/EachTaskInListContainer.jsx","components/Tasks/Tasks.jsx","components/Tasks/TasksContainer.jsx","components/ToDoListWrapper/ToDoListWrapper.jsx","components/ToDoListWrapper/ToDoListWrapperContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","NewTask","props","className","classes","newTaskInput","onKeyDown","enterHandler","onChange","catchInputChages","value","newTaskInputValue","initialState","newTaskCreated","maxId","tasks","store","createStore","state","action","type","allTasks","forEach","taskObj","index","id","splice","catchInputChagesActionCreator","NewTaskContainer","event","newState","target","setState","dispatch","checkIsInputValueContainOnlySpaces","inputValue","message","length","test","code","keyCode","this","newLocalState","updateData","bind","React","Component","EachTaskInList","task","onClick","removeTask","EachTaskInListContainer","deletedTaskId","parentNode","getAttribute","tasksList","map","taskValue","removeTaskHandler","Tasks","TasksContainer","tasksWrapper","localStorage","setItem","ToDoListWrapper","src","logo","alt","wrapper","ToDoListWrapperContainer","currentMaxId","getItem","data","JSON","parse","itemsArray","stringify","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.427b3dea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksList\":\"Tasks_tasksList__2gITH\",\"tasksWrapper\":\"Tasks_tasksWrapper__3F3lm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"EachTaskInList_task__3aaqC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ToDoListWrapper_wrapper__2aI7p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newTaskInput\":\"NewTask_newTaskInput__2kz-n\"};","export default __webpack_public_path__ + \"static/media/back.c0070ba5.png\";","import classes from \"./NewTask.module.css\";\r\nimport React from \"react\";\r\n\r\nconst NewTask = (props) => {\r\n    return (\r\n        <div className={classes.newTaskInput}>\r\n            <input\r\n                onKeyDown={props.enterHandler}\r\n                onChange={props.catchInputChages}\r\n                value={props.newTaskInputValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewTask;\r\n","import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n    newTaskInputValue: '',\r\n    newTaskCreated: 'false',\r\n    maxId: 3,\r\n    tasks: [{}]\r\n};\r\n\r\nfunction toDoListReducer(state = initialState, action) { // reducer function, which get action & return changed state\r\n    switch (action.type) {\r\n        case 'INPUT_TASK_VALUE_CHANGED':\r\n            state.newTaskInputValue = action.newTaskInputValue;\r\n            return state;\r\n        case 'REMOVE_TASK':\r\n            const allTasks = state.tasks;\r\n            allTasks.forEach((taskObj, index) => {\r\n                if (taskObj.id == action.id) {\r\n                    allTasks.splice(index, 1);\r\n                    state.tasks = allTasks;\r\n                }\r\n            });\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst store = createStore(toDoListReducer);\r\n\r\nexport const catchInputChagesActionCreator = (newTaskInputValue) => {\r\n    return {\r\n        type: 'INPUT_TASK_VALUE_CHANGED',\r\n        newTaskInputValue: newTaskInputValue\r\n    }\r\n};\r\n\r\nexport const removeTaskActionCreator = (id) => {\r\n    return {\r\n        type: 'REMOVE_TASK',\r\n        id: id\r\n    }\r\n};\r\n\r\nexport default store;\r\n","import NewTask from \"./NewTask\";\r\nimport React from \"react\";\r\nimport { catchInputChagesActionCreator } from \"./../../store\";\r\n\r\nclass NewTaskContainer extends React.Component {\r\n    state = {\r\n        newTaskInputValue: '',\r\n        newTaskCreated: null\r\n    }\r\n    catchInputChages = (event) => {\r\n        let newState = this.state;\r\n        newState.newTaskInputValue = event.target.value;\r\n        this.setState(newState);\r\n        let action = catchInputChagesActionCreator(this.state.newTaskInputValue);\r\n        return this.props.dispatch(action);\r\n    }\r\n    checkIsInputValueContainOnlySpaces = (inputValue) => {\r\n        let message = inputValue;\r\n        if (message.length > 0) {\r\n            let pattern = /^[\\s]+$/;\r\n            if (!pattern.test(message)) {\r\n                return true;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    enterHandler(event) {\r\n        if (event.code === 'Enter' || event.keyCode === 13) {\r\n            const isSpacesInInput = this.checkIsInputValueContainOnlySpaces(this.state.newTaskInputValue);\r\n            if (isSpacesInInput) {\r\n                let newState = this.state;\r\n                newState.newTaskCreated = 'true';\r\n                newState.newTaskInputValue = this.state.newTaskInputValue;\r\n                this.setState(newState);\r\n                let newLocalState = this.props.updateData(this.state);\r\n                newState.newTaskInputValue = '';\r\n                this.setState(newState);\r\n                return newLocalState;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <NewTask\r\n                newTaskInputValue={this.state.newTaskInputValue}\r\n                catchInputChages={this.catchInputChages}\r\n                enterHandler={this.enterHandler.bind(this)}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTaskContainer;\r\n","import classes from \"./EachTaskInList.module.css\";\r\nimport React from \"react\";\r\n\r\nconst EachTaskInList = (props) => {\r\n    return (\r\n        <div className={classes.task} id={props.id}>\r\n            <span>{props.value}</span>\r\n            <button onClick={event => props.removeTask(event)}>x</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EachTaskInList;\r\n","import classes from \"./EachTaskInList.module.css\";\r\nimport EachTaskInList from \"./EachTaskInList\";\r\nimport { removeTaskActionCreator } from \"./../../store\";\r\nimport React from \"react\";\r\n\r\nclass EachTaskInListContainer extends React.Component {\r\n    removeTaskHandler(event) {\r\n        let deletedTaskId = event.target.parentNode.getAttribute('id');\r\n        this.props.tasksList.map((task, index) => {\r\n            if (deletedTaskId == task.id) {\r\n                let action = removeTaskActionCreator(index);\r\n                this.props.dispatch(action);\r\n                return this.props.removeTask(index);\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.task} id={this.props.taskValue.id}>\r\n                <EachTaskInList\r\n                    id={this.props.taskValue.id}\r\n                    value={this.props.taskValue.value}\r\n                    removeTask={this.removeTaskHandler.bind(this)}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachTaskInListContainer;\r\n","import classes from \"./Tasks.module.css\";\r\nimport EachTaskInListContainer from '../EachTaskInList/EachTaskInListContainer';\r\nimport React from \"react\";\r\n\r\nconst Tasks = (props) => {\r\n    return (\r\n        <div className={classes.tasksList} >\r\n            <EachTaskInListContainer\r\n                store={props.store}\r\n                state={props.state}\r\n                dispatch={props.dispatch}\r\n                removeTask={props.removeTask}\r\n                taskValue={props.taskValue}\r\n                tasksList={props.tasksList}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks;\r\n","import classes from \"./Tasks.module.css\";\r\nimport Tasks from './Tasks';\r\nimport React from \"react\";\r\n\r\nconst TasksContainer = (props) => {\r\n    return (\r\n        <div className={classes.tasksWrapper}>\r\n            {props.tasksList.map(task => {\r\n                localStorage.setItem('itemsMaxId_1', task.id);\r\n                return (\r\n                    <div className={classes.tasksList} >\r\n                        <Tasks\r\n                            store={props.store}\r\n                            state={true}\r\n                            dispatch={props.dispatch}\r\n                            removeTask={props.removeTask}\r\n                            taskValue={task}\r\n                            tasksList={props.tasksList}\r\n                        />\r\n                    </div>\r\n                )\r\n            })}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default TasksContainer;\r\n","import classes from \"./ToDoListWrapper.module.css\";\r\nimport logo from './back.png';\r\nimport NewTaskContainer from '../NewTask/NewTaskContainer';\r\nimport TasksContainer from '../Tasks/TasksContainer';\r\nimport React from \"react\";\r\n\r\nconst ToDoListWrapper = (props) => {\r\n    return (\r\n        <div>\r\n            <div><img src={logo} className=\"App-logo\" alt=\"logo\" /></div>\r\n            <div className={classes.wrapper}>\r\n                <NewTaskContainer\r\n                    dispatch={props.store.dispatch}\r\n                    updateData={props.updateData}\r\n                />\r\n                <TasksContainer\r\n                    dispatch={props.store.dispatch}\r\n                    state={props.state}\r\n                    removeTask={props.removeTask}\r\n                    tasksList={props.tasksList}\r\n                    key={props.id}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoListWrapper;\r\n","import ToDoListWrapper from \"./ToDoListWrapper\";\r\nimport React from \"react\";\r\n\r\nclass ToDoListWrapperContainer extends React.Component {\r\n    state = {\r\n        newTaskInputValue: '',\r\n        newTaskCreated: 'false',\r\n        maxId: 1,\r\n        tasks: []\r\n    }\r\n    render() {\r\n        !localStorage.getItem('items') && localStorage.setItem('items', JSON.stringify([]));\r\n\r\n        const data = JSON.parse(localStorage.getItem('items'));\r\n\r\n        return (\r\n            <div>\r\n                <ToDoListWrapper\r\n                    store={this.props.store}\r\n                    updateData={this.updateData}\r\n                    state={this.state.newTaskCreated}\r\n                    removeTask={this.removeTask}\r\n                    tasksList={data}\r\n                    id={this.state.maxId}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    updateData = (value) => {\r\n        const currentMaxId = +localStorage.getItem('itemsMaxId_1');\r\n\r\n        this.setState({ newTaskCreated: value.newTaskCreated });\r\n        this.setState({ newTaskInputValue: value.newTaskInputValue });\r\n        this.setState({ maxId: currentMaxId + 1 });\r\n\r\n        this.setState({\r\n            tasks: [...this.state.tasks, {\r\n                id: currentMaxId + 1,\r\n                value: value.newTaskInputValue\r\n            }]\r\n        });\r\n\r\n        const data = JSON.parse(localStorage.getItem('items'));\r\n\r\n        const newTaskToStorage = [...data, {\r\n            id: currentMaxId + 1,\r\n            value: value.newTaskInputValue\r\n        }];\r\n\r\n        let itemsArray = newTaskToStorage;\r\n        localStorage.setItem('items', JSON.stringify(itemsArray));\r\n    }\r\n    removeTask = (id) => {\r\n        const allTasks = JSON.parse(localStorage.getItem('items'));\r\n        allTasks.splice(id, 1);\r\n\r\n        if (allTasks.length === 0) {\r\n            localStorage.setItem('itemsMaxId_1', 0);\r\n        }\r\n\r\n        localStorage.setItem('items', JSON.stringify(allTasks));\r\n\r\n        this.setState({\r\n            tasks: allTasks\r\n        });\r\n    }\r\n}\r\n\r\nexport default ToDoListWrapperContainer;\r\n","import './App.css';\r\nimport ToDoListWrapperContainer from './components/ToDoListWrapper/ToDoListWrapperContainer';\r\nimport store from './store';\r\nimport React from \"react\";\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <ToDoListWrapperContainer store={store} />\r\n      </div>\r\n    </BrowserRouter >\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}